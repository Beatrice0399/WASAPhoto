---
openapi: 3.0.0

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
    
  version: 1.0.0
tags:

  - name: "login"
    description: endpoint that handle the login
  - name: "user" 
    description: endpoint that handle users
  - name: "photo" 
    description: endpoint that handle photo 
  - name: "followers" 
    description: endpoint that handle followers
  - name: "ban" 
    description: endpoint that handle ban
  - name: "stream" 
    description: endpoint that handle stream
  - name: "likes" 
    description: endpoint that handle likes
  - name: "comment" 
    description: endpoint that handle comments

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |
              If the user does not exist, it will be created,
              and an identifier is returned.
              If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema:
              description: user's username
              type: object 
              properties:
                name:
                  $ref: '#/components/schemas/User/properties/username'
        required: true 
      responses:
        '201':
          description: User log-in action successful, returns user's id
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/User/properties/uid'

  /users:
    get:
      tags: ["user"]
      summary: gets user's profile with a given id
      description: an user can't find another user if he banned by the latter.
      operationId: getUserProfile
      parameters:
        - $ref: '#/components/parameters/profileName'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 

  /users/{uid}:
    parameters:
      - $ref: '#/components/parameters/uid'
    get:
      tags: ["user"]
      summary: user profile
      description: get user session's profile
      operationId: getProfile
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
    
    put:
      tags: ["user"]
      summary: set username
      description: change the username
      operationId: setMyUsername
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204': { $ref: '#/components/responses/no_content'}
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
          
  /users/{uid}/photos:
    post:
      tags: ["photo"]
      summary: upload Photo
      description: upload photo in user profile. Who follows you can see your photo
      operationId: uploadPhoto
      parameters:
        - $ref: '#/components/parameters/uid'
      requestBody:
        content:
          image/*:
            schema:
              $ref: '#/components/schemas/Image'
            example:
              photo_data: "011010011"
        required: true

      responses:
        '201':
          description: photo uploaded by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
        
  /users/{uid}/followers/{fid}:
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/fid'
    put:
      tags: ["followers"]
      summary: follow user
      description: follow user allow you see their photos
      operationId: followUser
      responses:
        '200': { $ref: '#/components/responses/successMessage'}
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 

    delete:
      tags: ["followers"]
      summary: unfollow a user
      description: no longer see user's photo updates
      operationId: unfollowUser
      responses:
        '200': { $ref: '#/components/responses/successMessage'}
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 

  /users/{uid}/bannedUsers/{bid}:
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/bid'
    put:
      tags: ["ban"]
      summary: ban a user
      description: banned user's profile will not visible. The user you ban will not be able to see your profile. You'll unfollow this user.
      operationId: banUser
      responses:
        '200': { $ref: '#/components/responses/successMessage'}
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 

    delete:
          tags: ["ban"]
          summary: unban user
          operationId: unbanUser
          description: user's profile will be visible again
          responses:
            '200': { $ref: '#/components/responses/successMessage'}
            '401': { $ref: '#/components/responses/unauthorized'}
            '403': { $ref: '#/components/responses/forbidden'}
            '404': { $ref: "#/components/responses/notFound"}
            '500': { $ref: "#/components/responses/internalServerError"}
          security:
            - bearerAuth: [] 
    
  /users/{uid}/home:
    get:
      tags: ["stream"]
      summary: get stream
      description: the stream is composed by following user photos
      operationId: getMyStream
      parameters:
        - $ref: '#/components/parameters/uid'
      responses:
        '200':
          description: get profile action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
        
  /users/{uid}/photos/{phid}/likes/{lid}:
    parameters:
      - $ref: '#/components/parameters/uid'
      - $ref: '#/components/parameters/phid'
      - $ref: '#/components/parameters/lid'
    put:
      tags: ["likes"]
      summary: like photo
      description: an user can put only one like per photo
      operationId: likePhoto
      responses: 
        '204': { $ref: '#/components/responses/no_content'}
        '400': { $ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
      
    delete:
      tags: ["likes"]
      summary: unlike photo
      description: remove like from the given photo id by user uid
      operationId: unlikePhoto
      responses:
        '204': { $ref: '#/components/responses/no_content'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
    
  /users/{uid}/photos/{phid}/comments:
    post:
      tags: ["comment"]
      summary: comment a photo
      description: Insert a comment by user below the given id photo
      operationId: commentPhoto
      parameters: 
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/phid'
      requestBody:
        description: contains id of who commented and the date
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses: 
        '201':
          description: photo commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment/properties/cid'
        '400': {$ref: '#/components/responses/badRequest'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
  
  /users/{uid}/photo/{phid}/comments/{cid}:        
    delete:
      tags: ["comment"]
      operationId: uncommentPhoto
      summary: Remove a comment
      description: Remove a comment from the photo
      parameters: 
        - $ref: '#/components/parameters/uid'
        - $ref: '#/components/parameters/phid'
        - $ref: '#/components/parameters/cid'
      responses:
        '204': { $ref: '#/components/responses/no_content'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 
          
  /users/{uid}/photo/{phid}:
    parameters:
          - $ref: '#/components/parameters/uid'
          - $ref: '#/components/parameters/phid'
    get:
      tags: ["photo"]
      summary: get photo
      operationId: getPhoto
      description: an user can see the photo if they are the owner of they're not banned by the owner
      responses:
        '200': 
          description: successful operation 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
    delete:
      tags: ["photo"]
      summary: delete photo
      operationId: deletePhoto
      description: remove a photo from user profile
      
      responses:
        '200': { $ref: '#/components/responses/successMessage'}
        '401': { $ref: '#/components/responses/unauthorized'}
        '403': { $ref: '#/components/responses/forbidden'}
        '404': { $ref: "#/components/responses/notFound"}
        '500': { $ref: "#/components/responses/internalServerError"}
      security:
        - bearerAuth: [] 

components:
  responses:
    no_content:
      description: Response associated to the 204 http status with no content to send for this reques
    successMessage:
      description: Message confirming for successful operation
      content:
        application/json:
          schema:
            description: string for username
            type: object
            properties:
              message:
                type: string
                pattern: '^.*?$' 
                minLength: 1
                maxLength: 100
                description: operation correctly executed 
    badRequest:
      description: Response associated to the 400 http status
        
    unauthorized:
      description:  Response associated to the 401 http status 
      
    forbidden:
      description: Response associated to the 403 http status (Access denied )

    notFound:
      description: Response associated to the 404 http status (The requested resource doesn't exist)
      
    internalServerError:
      description: Response associated to the 500 http status (Server has encountered an unknown error)

  parameters:
    uid:
      description: user's id
      name: uid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/uid'

    profileName:
      description: name of user searched
      name: profileName 
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/username'
    
    fid:
      description: follower user id
      name: fid
      in: path
      required: true
      schema: 
        $ref: '#/components/schemas/User/properties/username'

    bid:
      description: banned user id
      name: bid
      in: path
      required: true
      schema: 
        $ref: '#/components/schemas/User/properties/username'

    cid:
      description: comment id 
      name: cid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Comment/properties/cid'

    phid:
      description: photo id
      name: phid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Photo/properties/id'

    lid:
      description: it's the identifier of the user that liked the photo
      name: lid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/User/properties/uid' 

  schemas:
    Profile: 
      title: Profile
      description: the object represents a profile 
      type: object
      properties:
        name: 
          $ref: '#/components/schemas/User/properties/username'
        following:
          description: number of following
          type: integer
          example: 110
        follower:
          description: number of follower
          type: integer
          example: 210
        photos: 
          description: Contains the info of a profile's photos
          type: object
          properties:
            number:
              description: number of photos uploaded
              type: integer
              example: 50
            photo:
              $ref: '#/components/schemas/Stream'        
    
    Photo:
      title: Photo
      description : "The object respresents a Photo"
      type: object
      properties: 
        id: 
          description: photo id
          type: integer
          example: 1
        user: 
          $ref: '#/components/schemas/User/properties/uid'
        image:
          $ref: '#/components/schemas/Image'
        likes: 
          description: "number of users like the photo"
          type: integer
          example: 214
        comments:
          description: array of comment in a photo
          type: array
          minItems: 0
          maxItems: 1000
          items:
            $ref: '#/components/schemas/Comment'
    
    Image: 

      title: image
      description: string format for an image
      type: object
      properties:
        photo_data:
          description: raw data photo
          type: string
          minLength: 0
          maxLength: 100
          format: binary
          example: "011010011"
      example: 
        photo_data: "011010011"
          
    Stream:
      title: Stream
      description: photos of the following users
      type: array
      minItems: 0
      maxItems: 500
      items:
        $ref: '#/components/schemas/Photo'
    
    User:
      title: User
      description: the object represents an user
      type: object
      properties: 
        uid:
          description: represents an user id
          type: integer
          example: 13
        username:
          description: represents the name of the user
          type: string
          pattern: '^.*?$' 
          minLength: 4
          maxLength: 16
          example: 'Beatrice'
  
    Comment: 
      description: photo's comment composed by the username who commented and the text they wrote
      type: object
      properties:
        cid:
          description: comment id
          type: integer
          example: 74
        user:
          $ref: '#/components/schemas/User/properties/uid'
        text:
          description: comment string written by the useer
          type: string
          pattern: '^.*?$' 
          minLength: 1
          maxLength: 400
          example: "Great photo!"
        date: 
          description: time in which the operation is carried out
          type: string
          minLength: 1
          maxLength: 19
          format: date-time
          readOnly: true
          example: 2023-11-08T12:00:00

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer