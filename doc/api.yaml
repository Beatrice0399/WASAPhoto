---
openapi: 3.0.0

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
    
  version: 1.0.0
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user 
      description: |
              If the user does not exist, it will be created,
              and an identifier is returned.
              If the user exists, the user identifier is returned.
      operationId: doLogin 
      requestBody:
        description: User details 
        content:
          application/json: 
            schema:
              type: object 
              properties:
                name:
                  type: string 
                  example: Maria 
                  pattern: '^.*?$' 
                  minLength: 3 
                  maxLength: 16
        required: true 
      responses:
        '201':
          description: User log-in action successful 
          content:
            application/json: 
              schema:
                type: object 
                properties:
                  identifier:
                    type: integer
                    example: 1
  
  /me: 
    get:
      tags: ["MyProfile"]
      summary: user profile
      description: get session user's profile
      operationId: getMyProfile
      parameters:
        - $ref: '#/components/parameters/myid'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      
  /me/setMyUsername:
    post:
      tags: ["MyProfile"]
      summary: set username
      description: change the user session's name
      operationId: setMyUsername
      parameters:
        - $ref: '#/components/parameters/myid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201': {$ref: '#/components/responses/SuccessfulOperation'}
        '400': {$ref: '#/components/responses/BadRequest'}
                
          
  /me/photo:
    put:
      tags: ["MyProfile"]
      summary: upload Photo on user profile
      operationId: uploadPhoto
      parameters:
        - $ref: '#/components/parameters/myid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400': {$ref: '#/components/responses/BadRequest'}
  
  /profile/{pid}/followUser:
    post:
      tags: ["User", "follow"]
      summary: follow user
      description: follow user allow you see their photos
      operationId: followUser
      parameters:
        - $ref: '#/components/parameters/myid'
        - $ref: '#/components/parameters/pid'
      responses:
        '201': {$ref: '#/components/responses/SuccessfulOperation'}
        '400': {$ref: '#/components/responses/BadRequest'}
  
  /profile/{pid}/unfollowUser:
    post:
      tags: ["User", "unfollow"]
      summary: unfollow a user
      description: no longer see user's photo updates
      operationId: unfollowUser
      parameters:
        - $ref: '#/components/parameters/pid'
      responses:
        '201': {$ref: '#/components/responses/SuccessfulOperation'}
        '400': {$ref: '#/components/responses/BadRequest'}
    
  /me/banned:
    get:
      tags: ["MyProfile", "ban"]
      summary: get banned users
      description: get a list of banned users by the user's session
      parameters:
        - $ref: '#/components/parameters/myid'
      responses:
        '200':  
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannedUsers'
        '400': {$ref: '#/components/responses/BadRequest'}

  /me/banned/{pid}:
    post: 
      tags: ["MyProfile", "ban"]
      summary: ban a user
      description: banned user's profile will not visible
      operationId: banUser
      parameters:
        - $ref: '#/components/parameters/myid'
        - $ref: '#/components/parameters/pid'
      responses:
        '201': {$ref: '#/components/responses/SuccessfulOperation'}
        '400': {$ref: '#/components/responses/BadRequest'}

    delete:
      tags: ["MyProfile", "ban"]
      summary: unban user
      description: user's profile will be visible again
      parameters:
        - $ref: '#/components/parameters/myid'
        - $ref: '#/components/parameters/pid'
      responses:
        '204':
          description: successful operation   
        '404': {$ref: '#/components/responses/NotFound'}
    
  /profile/{pid}:
    get:
      tags: ["User", "Profile"]
      summary: get a user profile
      description: get a user profile with the given id
      operationId: getUserProfile
      parameters: 
        - $ref: '#/components/parameters/pid'
      responses:
        '200':
          description: get profile action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400': {$ref: '#/components/responses/BadRequest'}
                
  /home:
    get:
      tags: ["Stream"]
      summary: get stream
      description: the stream is composed by following user photos
      operationId: getMyStream
      parameters:
        - $ref: '#/components/parameters/myid'
      responses:
        '200':
          description: get profile action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
        '400': { $ref: '#/components/responses/BadRequest'}
                
  /photo/{phid}/like/:
    post:
      tags: ["Photo", "like"]
      summary: like photo
      operationId: likePhoto
      parameters:
        - $ref: '#/components/parameters/phid'
      responses: 
        '201': { $ref: '#/components/responses/SuccessfulOperation'}
    delete:
      tags: ["Photo", "unlike"]
      summary: unlike photo
      description: remove like from the given photo id
      operationId: unlikePhoto
      parameters:
        - $ref: '#/components/parameters/phid'
      responses:
        '204':
          description: sucessful operation
        '404': { $ref: '#/components/responses/NotFound'}
    
  /photo/{phid}/comment/:
    post:
      tags: ["Photo", "Comment"]
      summary: comment a photo
      operationId: commentPhoto
      parameters: 
        - $ref: '#/components/parameters/phid'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "Nice photo!"
      responses: 
        '201':
          description: photo commented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400': {$ref: '#/components/responses/BadRequest'}
  
  /photo/{phid}/comment/{cid}:        
    delete:
      tags: ["Photo", "Comment"]
      operationId: uncommentPhoto
      summary: Remove a comment
      description: Remove a comment from the photo
      parameters: 
        - $ref: '#/components/parameters/phid'
        - name: cid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/cid'
      responses:
        "204": 
          description: Comment deleted successfully
        "404": { $ref: '#/components/responses/NotFound'}
          
  /me/photo/{phid}:
    delete:
      tags: ["MyProfile", "Photo"]
      summary: delete photo
      description: remove a photo from user profile
      parameters:
        - $ref: '#/components/parameters/myid'
        - $ref: '#/components/parameters/phid'
      responses:
        "204": 
          description: Photo deleted successfully
        "404": { $ref: '#/components/responses/NotFound'}

components:
  responses:
    BadRequest:
      description: response of bad request
      content:
        application/json:
          schema:
            type: string
            minLength: 4
            maxLength: 30 
            pattern: '^.*?$' 
    SuccessfulOperation:
      description: response of successful operation
      content:
        application/json:
          schema:
            type: string
            minLength: 4
            maxLength: 30 
            pattern: '^.*?$' 
    NotFound:
      description: element not found
      content:
        application/json:
          schema:
            type: string
            minLength: 4
            maxLength: 30 
            pattern: '^.*?$' 

  parameters:
    myid:
      description: user session id
      name: myid
      in: query
      required: true
      schema: 
        $ref: '#/components/schemas/myid'
    
    pid:
      description: profile id
      name: pid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/pid'
    
    phid:
      description: photo id
      name: phid
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/phid'

  schemas:
    Profile: 
      title: Profile
      description: the object represents a profile 
      type: object
      properties:
        pid:
          $ref: '#/components/schemas/pid'
        name: 
          $ref: '#/components/schemas/User'
        following:
          description: number of following
          type: integer
          example: 110
        follower:
          description: number of follower
          type: integer
          example: 210
        photos: 
          properties:
            number:
              description: number of photos uploaded
              type: integer
              example: 50
            photo:
              $ref: '#/components/schemas/Stream'
              
    myid: 
      title: myid
      description: session id
      type: integer
      example: 1
    
    pid: 
      title: pid
      description: profile id
      type: integer
      example: 1
      
    phid: 
      title: phid
      description: photo id
      type: integer
      example: 1
      
    cid: 
      title: cid
      description: comment id
      type: integer
      example: 1
    
    Photo:
      title: Photo
      description : "The object respresents a Photo"
      type: object
      properties: 
        id: 
          $ref: '#/components/schemas/phid'
        user: 
          $ref: '#/components/schemas/User'
        image:
          $ref: '#/components/schemas/Image'
        likes: 
          description: "number of users like the photo"
          type: integer
        comments:
          type: array
          minLength: 0
          maxLength: 1000
          items:
            $ref: '#/components/schemas/Comment'
    
    Image: 
      title: image
      description: string format for an image
      type: string
      format:  base64
      minLength: 1
      maxLength: 9999
          
    Stream:
      title: Stream
      description: photos of the following users
      type: array
      minLength: 0
      maxLength: 500
      items:
        $ref: '#/components/schemas/Photo'
    
    User:
      title: User
      description: the object represents an user
      type: object
      properties: 
        username:
          description: represents the name of the user
          type: string
          pattern: '^.*?$' 
          minLength: 4
          maxLength: 16
          example: 'Beatrice'
  
    Comment: 
      description: photo's comment composed by the username who commented and the text they wrote
      type: object
      properties:
        cid:
          $ref: '#/components/schemas/cid'
        user:
          $ref: '#/components/schemas/User'
        text:
          type: string
          pattern: '^.*?$' 
          minLength: 1
          maxLength: 400
          example: "Great photo!"
        date: 
          type: string
          example: 2023-11-08T12:00:00
    
    BannedUsers:
      description: list of banned users
      type: array
      minLength: 0
      maxLength: 200
      items:
        $ref: '#/components/schemas/User'